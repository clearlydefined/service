#!/usr/bin/env node
// Copyright (c) Microsoft Corporation and others. Licensed under the MIT license.
// SPDX-License-Identifier: MIT

const config = require('./config')
const app = require('../app')(config)
const debug = require('debug')('service:server')
const http = require('http')
const init = require('express-init')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '4000')
app.set('port', port)

/**
 * Create HTTP server.
 */
const server = http.createServer(app)

/**
 * Initialize the apps (if they have async init functions) and start listening
 */
init(app, error => {
  if (error) {
    console.log('Error initializing the Express app: ' + error)
    throw new Error(error)
  }
  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
  console.log(`Service listening on port: ${port}`)
})

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)
  // named pipe
  if (isNaN(port)) return val
  // port number
  if (port >= 0) return port
  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
