openapi: "3.0.0"

info:
  version: "0.1.0"
  title: ClearlyDefined API
  description: The REST API for clearlydefined.io

servers:
- url: https://clearlydefined.io
  description: Production environment
- url: https://dev.clearlydefined.io
  description: Development environment

paths:
  /curations/{type}/{provider}/{namespace}/{name}:
    get:
      summary: Gets a list of components that have curations.
      tags:
        - curations
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
      responses:
        200:
          description: List of curations for the identified components.
  /curations/{type}/{provider}/{namespace}/{name}/{revision}/pr/{pr}:
    get:
      summary: Gets a proposed curation for a component revision.
      tags:
        - curations
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
        - $ref: "#/components/parameters/pr"
      responses:
        200:
          description: Proposed curation for the component revision.
  /curations/{type}/{provider}/{namespace}/{name}/{revision}:
    get:
      summary: Gets a curation for a component revision.
      tags:
        - curations
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
      responses:
        200:
          description: Component revision curation.
    patch:
      summary: Patches the curation of a component revision.
      tags:
        - curations
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
      responses:
        200:
          description: Nothing. TODO - this should be 204 or return something.
  /harvest:
    post:
      summary: Post the given components to be harvested
      tags:
        - harvest
      requestBody:
        description: A single or array of requests
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/bodies/request'
      responses:
        201:
          description: Harvested file has been accepted.
  /harvest/status:
    post:
      summary: Request the creation of a resoruce that is the summary of all harvested data available for the components outlined in the POST body
      tags:
        - harvest
      requestBody:
        description: List of components to report on.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/bodies/componentList'
      responses:
        200:
          description: Status request has been accepted.
          content:
            application/json:
              schema:
                $ref: '#components/bodies/outputSummaryList'

  /harvest/{type}/{provider}/{namespace}/{name}/{revision}:
    get:
      summary: Get all the harvested data for a component revision.
      tags:
        - harvest
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
        - name: form
          in: query
          schema:
            type: string
            enum:
              - summary
              - streamed
              - raw
              - list
          description: >
            Form of the response:
             * `summary` - summarized harvested file
             * `raw` or `streamed` - content of the harvested file
             * `list` - list of matching harvested files
      responses:
        200:
          description: Unknown. TODO.
  /harvest/{type}/{provider}/{namespace}/{name}/{revision}/{tool}:
    get:
      summary: Get a list of harvested data.
      tags:
        - harvest
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
        - $ref: "#/components/parameters/tool"
        - name: form
          in: query
          schema:
            type: string
            enum:
              - list
          description: >
            Form of the response:
             * `list` - list of matching harvested files
      responses:
        200:
          description: Unknown. TODO.
  /harvest/{type}/{provider}/{namespace}/{name}/{revision}/{tool}/{toolVersion}:
    get:
      summary: Gets the harvested file for a component revision.
      tags:
        - harvest
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
        - $ref: "#/components/parameters/tool"
        - $ref: "#/components/parameters/toolVersion"
        - name: form
          in: query
          schema:
            type: string
            enum:
              - summary
              - streamed
              - raw
              - list
          description: >
            Form of the response:
             * `summary` - summarized harvested file
             * `raw` or `streamed` - content of the harvested file
             * `list` - list of matching harvested files
      responses:
        200:
          description: Harvested file.
    put:
      summary: Puts the harvested file for a component revision.
      tags:
        - harvest
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
        - $ref: "#/components/parameters/tool"
        - $ref: "#/components/parameters/toolVersion"
      responses:
        201:
          description: Harvested file has been accepted.
  /definitions:
    post:
      summary: Request the creation of a resource that is the summary of all definitions available for the components outlined in the POST body
      tags:
        - definitions
      requestBody:
        description: List of components to report on.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/bodies/componentList'
      responses:
        200:
          description: Status request has been accepted.
          content:
            application/json:
              schema:
                $ref: '#components/bodies/definitionList'
    get:
      summary: Gets the coordinates for all definitions that match the given pattern in the specified part of the definition.
      tags:
        - definitions
      parameters:
        - in: query
          name: pattern
          schema:
            type: string
          required: true
          description: The string to search for in definition coordinates
        - in: query
          name: type
          schema:
            type: string
          description: The part of the definition to search for the given pattern. Valid values are 'coordinates' (default) and 'copyrights'.
      responses:
        200:
      description: List of definitions that have definitions.
  /definitions/{type}/{provider}/{namespace}/{name}/{revision}:
    get:
      summary: Gets the definition for a component revision.
      tags:
        - definitions
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
      responses:
        200:
          description: Component definition.
    post:
      summary: Previews the definition of a component revision with the included curation.
      tags:
        - definitions
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
        - name: preview
          in: query
          schema:
            type: boolean
          required: true
          description: Preview the definition.
      responses:
        200:
          description: Component definitions.
  /definitions/{type}/{provider}/{namespace}/{name}/{revision}/pr/{pr}:
    get:
      summary: Previews the definition of a component revision with the proposed curation.
      tags:
        - definitions
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
        - $ref: "#/components/parameters/pr"
      responses:
        200:
          description: Component definition.
  /badges/{type}/{provider}/{namespace}/{name}/{revision}:
    get:
      summary: Gets a link to the badge icon of a component revision.
      tags:
        - definitions
      parameters:
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/namespace"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/revision"
      responses:
        200:
          description: Badge icon link, either level 1, 2 or 3.

tags:
  - name: definitions
    description: Component definitions - most API consumers will be interested in these
  - name: curations
    description: Curate component metadata - ClearlyDefined developers will be interested in these
  - name: harvest
    description: Harvest component metadata - ClearlyDefined developers will be intereted in these


components:
  bodies:
    componentList:
      name: componentList
      description: A list of components to operate on. Each entry is a path describing a component, potentially with a version.
      type: array
      items: string
      example:
        - git/github/microsoft/redie/194269b5b7010ad6f8dc4ef608c88128615031ca
        - npm/npmjs/-/redie/0.3.0
    request:
      name: request
      description: A request to harvest a component. One of harvest.json#definitions/requests or harvest.json#definitions/request
      type: object
      example:
        - tool: package
          path: npm/npmjs/-/redie/0.3.0
        - tool: source
          path: git/github/microsoft/redie/194269b5b7010ad6f8dc4ef608c88128615031ca

    definitionList:
      type: object
      description: A list of component definitions that are available (see definition.json#definitions/componentDefinitionList)
      example: 
        'git/github/microsoft/redie/194269b5b7010ad6f8dc4ef608c88128615031ca':
          coordinates:
            type: git
            provider: github
            namespace: microsoft
            name: redie
            revision: 194269b5b7010ad6f8dc4ef608c88128615031ca
          described: 
            sourceLocation:
              type: git
              provider: github
              namespace: microsoft
              name: redie
              revision: 194269b5b7010ad6f8dc4ef608c88128615031ca
            releaseDate: 2018-01-29T01:29:32.869Z
          licensed:
            declared: MIT
            facets:
              core: 
                attribution:
                  parties:
                    - Microsoft Corporation
                discovered:
                    - MIT
                    - GPL

    outputSummaryList:
      type: object
      description: A list of tool outputs that are available (see harvest.json#definitions/definitionSummaryList)
      example: 
        'git/github/microsoft/redie/194269b5b7010ad6f8dc4ef608c88128615031ca':
          clearlydefined: 
            - 1
          scancode: 
            - 2.2.1
        'npm/npmjs/-/redie/0.3.0':
          clearlydefined:
            - 1
          scancode:
            - 2.2.1

  parameters:
    type:
      name: type
      in: path
      required: true
      description: the type of component
      schema:
        type: string
        enum:
        - npm
        - git
    provider:
      name: provider
      in: path
      required: true
      description: where the component can be found
      schema:
        type: string
        enum:
        - npmjs
        - github
    namespace:
      name: namespace
      in: path
      required: true
      description: many component systems have namespaces. GitHub orgs, NPM namespace, Maven group id, ... This segment must be supplied. If your component does not have a namespace, use '-' (ASCII hyphen).
      schema:
        type: string
    name:
      name: name
      in: path
      required: true
      description: the name of the component you want. Given the `namespace` segment mentioned above, this is just the simple name.
      schema:
        type: string
    revision:
      name: revision
      in: path
      required: true
      description: components typically have some differentiator like a version or commit id. Use that here. If this segment is omitted, the latest revision is used (if that makes sense for the provider).
      schema:
        type: string
    pr:
      name: pr
      in: path
      required: true
      description: the GitHub PR number to apply to the existing harvested and curated data. Note that that this parameter must be preceded by a 'pr' segment.
      schema:
        type: number
    tool:
      name: tool
      in: path
      required: true
      description: the identifier of the tool
      schema:
        type: string
    toolVersion:
      name: toolVersion
      in: path
      required: true
      description: the identifier of the tool version
      schema:
        type: string
