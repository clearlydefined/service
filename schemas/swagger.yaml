openapi: '3.0.0'

info:
  version: '0.1.0'
  title: ClearlyDefined API
  description: The REST API for clearlydefined.io

servers:
  - url: https://api.clearlydefined.io
    description: Production environment
  - url: https://dev-api.clearlydefined.io
    description: Development environment
  - url: http://localhost:4000
    description: localhost environment

paths:
  /curations/{type}/{provider}/{namespace}/{name}:
    get:
      summary: Gets a list of components that have curations.
      tags:
        - curations
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
      responses:
        200:
          description: List of curations for the identified components.
  /curations/{type}/{provider}/{namespace}/{name}/{revision}/pr/{pr}:
    get:
      summary: Gets a proposed curation for a component revision.
      tags:
        - curations
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
        - $ref: '#/components/parameters/pr'
      responses:
        200:
          description: Proposed curation for the component revision.
  /curations/{type}/{provider}/{namespace}/{name}/{revision}:
    get:
      summary: Gets a curation for a component revision.
      tags:
        - curations
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
      responses:
        200:
          description: Component revision curation.
  /curations/:
    post:
      summary: Gets a batch of curations for a list of components
      tags:
        - curations
      requestBody:
        description: A list of coordinates
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/componentList'
      responses:
        200:
          description: The curation data keyed by coordinates
  /curations:
    patch:
      summary: Patches the curation of a (set of) component revision.
      tags:
        - curations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contributionInfo:
                  type: object
                  properties:
                    summary:
                      type: string
                    details:
                      type: string
                    resolution:
                      type: string
                    type:
                      type: string
                    removedDefinitions:
                      type: boolean
                patches:
                  type: array
                  items:
                    $ref: /schemas/curations-1.0.json
      responses:
        200:
          description: A summary of the curation (PR) created
          content:
            application/json:
              schema:
                type: object

  /harvest:
    post:
      summary: Post the given components to be harvested
      tags:
        - harvest
      requestBody:
        $ref: '#/components/requestBodies/harvestRequest'
      responses:
        201:
          description: Harvested file has been accepted.

  /harvest/{type}/{provider}/{namespace}/{name}/{revision}:
    get:
      summary: Get all the harvested data for a component revision.
      tags:
        - harvest
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
        - name: form
          in: query
          schema:
            type: string
            enum:
              - summary
              - streamed
              - raw
              - list
          description: >
            Form of the response:
             * `summary` - summarized harvested file
             * `raw` or `streamed` - content of the harvested file
             * `list` - list of matching harvested files
      responses:
        200:
          description: Unknown. TODO.
  /harvest/{type}/{provider}/{namespace}/{name}/{revision}/{tool}:
    get:
      summary: Get a list of harvested data.
      tags:
        - harvest
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
        - $ref: '#/components/parameters/tool'
        - name: form
          in: query
          schema:
            type: string
            enum:
              - list
          description: >
            Form of the response:
             * `list` - list of matching harvested files
      responses:
        200:
          description: Unknown. TODO.
  /harvest/{type}/{provider}/{namespace}/{name}/{revision}/{tool}/{toolVersion}:
    get:
      summary: Gets the harvested file for a component revision.
      tags:
        - harvest
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
        - $ref: '#/components/parameters/tool'
        - $ref: '#/components/parameters/toolVersion'
        - name: form
          in: query
          schema:
            type: string
            enum:
              - summary
              - streamed
              - raw
              - list
          description: >
            Form of the response:
             * `summary` - summarized harvested file
             * `raw` or `streamed` - content of the harvested file
             * `list` - list of matching harvested files
      responses:
        200:
          description: Harvested file.
    put:
      summary: Puts the harvested file for a component revision.
      tags:
        - harvest
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
        - $ref: '#/components/parameters/tool'
        - $ref: '#/components/parameters/toolVersion'
      responses:
        201:
          description: Harvested file has been accepted.
  /definitions:
    post:
      summary: Request the creation of a resource that is the summary of all definitions available for the components outlined in the POST body
      tags:
        - definitions
      requestBody:
        description: A list of components to operate on. Each entry is a path describing a component, potentially with a version.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/componentList'
      responses:
        200:
          description: Status request has been accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/requestBodies/definitionList'
    get:
      summary: Gets the coordinates for all definitions that match the given pattern in the specified part of the definition.
      tags:
        - definitions
      parameters:
        - in: query
          name: pattern
          schema:
            type: string
          description: The string to search for in definition coordinates to get coordinate suggestions
        - in: query
          name: type
          schema:
            type: string
          description: The 'type' coordinates segment
        - in: query
          name: provider
          schema:
            type: string
          description: The 'provider' coordinates segment
        - in: query
          name: name
          schema:
            type: string
          description: The 'name' coordinates segment
        - in: query
          name: namespace
          schema:
            type: string
          description: The 'namespace' coordinates segment
        - in: query
          name: license
          schema:
            type: string
          description: The SPDX license identifier
        - in: query
          name: releasedAfter
          schema:
            type: string
          description: The minimum release date for the component
        - in: query
          name: releasedBefore
          schema:
            type: string
          description: The maximum release date for the component
        - in: query
          name: minLicensedScore
          schema:
            type: integer
          description: The minimum effective licensed score for the component
        - in: query
          name: maxLicensedScore
          schema:
            type: integer
          description: The maximum effective licensed score for the component
        - in: query
          name: minDescribedScore
          schema:
            type: integer
          description: The minimum effective described score for the component
        - in: query
          name: maxDescribedScore
          schema:
            type: integer
          description: The maximum effective described score for the component
        - in: query
          name: sort
          schema:
            type: string
          description: The field to sort the results by.  Valid values include type, provider, namespace, name, revision, license, releaseDate, licensedScore, describedScore, effectiveScore and toolScore
        - in: query
          name: sortDesc
          schema:
            type: boolean
          description: The direction to sort the results by
        - in: query
          name: continuationToken
          schema:
            type: string
          description: Used for pagination. Seeded from the results of the previous query
      responses:
        200:
          description: List of definitions that have definitions.
  /definitions/{type}/{provider}/{namespace}/{name}/{revision}:
    get:
      summary: Gets the definition for a component revision and queues the component for harvest if harvest results are unavailable.
      tags:
        - definitions
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
        - in: query
          name: expand
          schema:
            type: string
          description: Fields to explicitly include or exclude. E.g. "-files" excludes files.
      responses:
        200:
          description: Component definition.
    post:
      summary: Previews the definition of a component revision with the included curation.
      tags:
        - definitions
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
        - name: preview
          in: query
          schema:
            type: boolean
          required: true
          description: Preview the definition.
      responses:
        200:
          description: Component definitions.
  /definitions/{type}/{provider}/{namespace}/{name}/{revision}/pr/{pr}:
    get:
      summary: Previews the definition of a component revision with the proposed curation.
      tags:
        - definitions
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/revision'
        - $ref: '#/components/parameters/pr'
      responses:
        200:
          description: Component definition.
  /attachments/{id}:
    get:
      summary: Gets the attachment with the given content id.
      tags:
        - attachments
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The id identifying the attachment to access
      responses:
        200:
          description: The raw content of the attachment corresponding to the given id.
  /notices:
    post:
      summary: Request the creation of a resource that is the notice file for the components outlined in the POST body
      tags:
        - notices
      requestBody:
        content:
          application/json:
            schema:
              $ref: /schemas/notice-request.json
      responses:
        200:
          description: Status request has been accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noticeFile'
        400:
          description: Invalid notice request body.

tags:
  - name: definitions
    description: Component definitions - most API consumers will be interested in these
  - name: curations
    description: Curate component metadata - ClearlyDefined developers will be interested in these
  - name: harvest
    description: Harvest component metadata - ClearlyDefined developers will be interested in these
  - name: attachments
    description: Definition attachments - Raw content of attachments for harvested component data

components:
  schemas:
    componentList:
      type: array
      items:
        type: string
      example:
        - git/github/microsoft/redie/194269b5b7010ad6f8dc4ef608c88128615031ca
        - npm/npmjs/-/redie/0.3.0
        - conda/conda-forge/linux-64/21cmfast/3.1.1-py36

    noticeFile:
      type: object
      properties:
        content:
          type: string
        summary:
          properties:
            total:
              type: number
            warnings:
              type: object
              properties:
                noDefinition:
                  type: array
                  items:
                    type: string
                noLicense:
                  type: array
                  items:
                    type: string
                noCopyright:
                  type: array
                  items:
                    type: string

  requestBodies:
    harvestRequest:
      description: A request to harvest a component. One of harvest.json#definitions/requests or harvest.json#definitions/request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              tool:
                type: string
              coordinates:
                type: string
            example:
              - tool: package
                coordinates: npm/npmjs/-/redie/0.3.0
              - tool: source
                coordinates: git/github/microsoft/redie/194269b5b7010ad6f8dc4ef608c88128615031ca
    definitionList:
      description: A list of component definitions that are available (see definition.json#definitions/componentDefinitionList)
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
            example:
              'git/github/microsoft/redie/194269b5b7010ad6f8dc4ef608c88128615031ca':
                coordinates:
                  type: git
                  provider: github
                  namespace: microsoft
                  name: redie
                  revision: 194269b5b7010ad6f8dc4ef608c88128615031ca
                described:
                  sourceLocation:
                    type: git
                    provider: github
                    namespace: microsoft
                    name: redie
                    revision: 194269b5b7010ad6f8dc4ef608c88128615031ca
                  releaseDate: '2018-01-29'
                licensed:
                  declared: MIT
                  facets:
                    core:
                      attribution:
                        parties:
                          - Microsoft Corporation
                      discovered:
                        - MIT
                        - GPL
    outputSummaryList:
      description: A list of tool outputs that are available (see harvest.json#definitions/definitionSummaryList)
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
            example:
              'git/github/microsoft/redie/194269b5b7010ad6f8dc4ef608c88128615031ca':
                clearlydefined:
                  - 1
                scancode:
                  - 2.2.1
              'npm/npmjs/-/redie/0.3.0':
                clearlydefined:
                  - 1
                scancode:
                  - 2.2.1

  parameters:
    type:
      name: type
      in: path
      required: true
      description: the type of component
      schema:
        type: string
        enum:
          - composer
          - conda
          - condasrc
          - crate
          - deb
          - debsrc
          - gem
          - git
          - go
          - maven
          - npm
          - nuget
          - pod
          - pypi
          - sourcearchive
    provider:
      name: provider
      in: path
      required: true
      description: where the component can be found
      schema:
        type: string
        enum:
          - anaconda-main
          - anaconda-r
          - cocoapods
          - conda-forge
          - cratesio
          - debian
          - github
          - gitlab
          - mavencentral
          - mavengoogle
          - gradleplugin
          - npmjs
          - nuget
          - packagist
          - pypi
          - rubygems
    namespace:
      name: namespace
      in: path
      required: true
      description: many component systems have namespaces. GitHub orgs, NPM namespace, Maven group id, Conda Subdir/Architecture ... This segment must be supplied. If your component does not have a namespace, use '-' (ASCII hyphen).
      schema:
        type: string
    name:
      name: name
      in: path
      required: true
      description: the name of the component you want. Given the `namespace` segment mentioned above, this is just the simple name.
      schema:
        type: string
    revision:
      name: revision
      in: path
      required: true
      description: components typically have some differentiator like a version or commit id. Use that here. If this segment is omitted, the latest revision is used (if that makes sense for the provider).
      schema:
        type: string
    pr:
      name: pr
      in: path
      required: true
      description: the GitHub PR number to apply to the existing harvested and curated data. Note that that this parameter must be preceded by a 'pr' segment.
      schema:
        type: number
    tool:
      name: tool
      in: path
      required: true
      description: the identifier of the tool
      schema:
        type: string
    toolVersion:
      name: toolVersion
      in: path
      required: true
      description: the identifier of the tool version
      schema:
        type: string
